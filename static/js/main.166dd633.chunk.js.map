{"version":3,"sources":["reportWebVitals.ts","BLL/Reducer.tsx","BLL/store.ts","utils/localStorage.ts","Components/Counter/Screen/Screen.tsx","Components/Counter/Buttons/Button/Button.tsx","Components/Counter/Buttons/Buttons.tsx","Components/Counter/CounterWithRedux.tsx","Components/Params/Input.tsx","Components/Params/ParamsWithRedux.tsx","AppWithRedux.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SETNUM","SETMAXNUM","SETSTARTVALUE","SETMAXVALUE","SETSTARTVALUEFORCLICK","SETMAXVALUEFORCLICK","SETERROR","initialState","num","maxNum","startValue","maxValue","startValueForClick","maxValueForClick","error","setNumAC","value","type","setErrorAC","rootReducer","combineReducers","counter","state","action","store","createStore","preloadedState","numAsString","localStorage","getItem","maxNumAsString","startValueForClickAsString","maxValueForClickAsString","JSON","parse","loadState","applyMiddleware","thunk","subscribe","getState","setItem","stringify","Screen","useSelector","screenClass","className","Button","props","Buttons","dispatch","useDispatch","disableForMore","disableForReset","disabled","onClick","CounterWithRedux","Input","label","ParamsWithRedux","onChange","e","currentTarget","setMaxValueForClickAC","setMaxNumAC","AppWithRedux","useEffect","SuperButtonSetTheme","path","element","to","isActive","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.166dd633.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {maxValueForClickType} from '../App';\r\n\r\nconst SETNUM = 'SETNUM'\r\nconst SETMAXNUM = 'SETMAXNUM'\r\nconst SETSTARTVALUE = 'SETSTARTVALUE'\r\nconst SETMAXVALUE = 'SETMAXVALUE'\r\nconst SETSTARTVALUEFORCLICK = 'SETSTARTVALUEFORCLICK'\r\nconst SETMAXVALUEFORCLICK = 'SETMAXVALUEFORCLICK'\r\nconst SETERROR = 'SETERROR'\r\nexport type StateType = {\r\n    num: number\r\n    maxNum: number\r\n    startValue: number\r\n    maxValue: number\r\n    startValueForClick: number\r\n    maxValueForClick: maxValueForClickType\r\n    error: boolean\r\n}\r\nexport type ActionType =\r\n    ReturnType<typeof setNumAC>\r\n    | ReturnType<typeof setMaxNumAC>\r\n    | ReturnType<typeof setStartValueAC>\r\n    |\r\n    ReturnType<typeof setMaxValueAC>\r\n    | ReturnType<typeof setStartValueForClickAC>\r\n    | ReturnType<typeof setMaxValueForClickAC>\r\n    |\r\n    ReturnType<typeof setErrorAC>\r\n\r\nconst initialState: StateType = {\r\n    num: 0,\r\n    maxNum: 0,\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    startValueForClick: 0,\r\n    maxValueForClick: null,\r\n    error: false\r\n};\r\n\r\n\r\nexport const counterReducer = (state: StateType = initialState, action: ActionType):StateType => {\r\n    switch (action.type) {\r\n        case SETSTARTVALUE:\r\n            return {...state, startValue: action.value}\r\n        case SETMAXVALUE:\r\n            return {...state, maxValue: action.value}\r\n        case SETSTARTVALUEFORCLICK:\r\n            return {...state, startValueForClick: state.startValue}\r\n        case SETMAXVALUEFORCLICK:\r\n            return {...state, maxValueForClick: state.maxValue}\r\n        case SETNUM:\r\n            return {...state, num: action.value}\r\n        case SETMAXNUM:\r\n            return {...state, maxNum: action.value}\r\n        case SETERROR:\r\n            return {...state, error: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setNumAC = (value: number) => ({type: SETNUM, value} as const)\r\nexport const setMaxNumAC = (value: number) => ({type: SETMAXNUM, value} as const)\r\nexport const setStartValueAC = (value: number) => ({type: SETSTARTVALUE, value} as const)\r\nexport const setMaxValueAC = (value: number) => ({type: SETMAXVALUE, value} as const)\r\nexport const setStartValueForClickAC = (value: number) => ({type: SETSTARTVALUEFORCLICK, value} as const)\r\nexport const setMaxValueForClickAC = (value: number) => ({type: SETMAXVALUEFORCLICK, value} as const)\r\nexport const setErrorAC = (value: boolean) => ({type: SETERROR, value} as const)\r\n\r\n\r\n\r\n\r\n\r\n//THUNK\r\n/*\r\nexport const setStateToLocalStorageTC = ()=>(dispatch:Dispatch, getState:()=>RootReducerType)=>{\r\n    localStorage.setItem('num', JSON.stringify(getState().counter.num+1))\r\n    localStorage.setItem('maxNum', JSON.stringify(getState().counter.maxNum))\r\n    localStorage.setItem('startValue', JSON.stringify(getState().counter.startValue))\r\n    localStorage.setItem('maxValue', JSON.stringify(getState().counter.maxValue))\r\n    localStorage.setItem('startValueForClick', JSON.stringify(getState().counter.startValueForClick))\r\n    localStorage.setItem('maxValueForClick', JSON.stringify(getState().counter.maxValueForClick))\r\n    dispatch(setNumAC(getState().counter.num + 1 ))\r\n}\r\n\r\nexport const getStateFromLocalStorageTC = ()=>(dispatch:Dispatch)=>{\r\n    let numAsString = localStorage.getItem('num');\r\n    let maxNumAsString = localStorage.getItem('maxNum');\r\n    let startValueAsString = localStorage.getItem('startValue');\r\n    let maxValueAsString = localStorage.getItem('maxValue');\r\n    let startValueForClickAsString = localStorage.getItem('startValueForClick');\r\n    let maxValueForClickAsString = localStorage.getItem('maxValueForClick');\r\n    if (numAsString) {\r\n        dispatch(setNumAC(JSON.parse(numAsString)))\r\n    }\r\n    if (maxNumAsString) {\r\n        dispatch(setMaxNumAC(JSON.parse(maxNumAsString)))\r\n    }\r\n    if (startValueAsString) {\r\n        dispatch(setStartValueAC(JSON.parse(startValueAsString)))\r\n    }\r\n    if (maxValueAsString) {\r\n        dispatch(setMaxValueAC(JSON.parse(maxValueAsString)))\r\n    }\r\n    if (startValueForClickAsString) {\r\n        dispatch(setStartValueForClickAC(JSON.parse(startValueForClickAsString)))\r\n    }\r\n    if (maxValueForClickAsString) {\r\n        dispatch(setMaxValueForClickAC(JSON.parse(maxValueForClickAsString)))\r\n    }\r\n\r\n\r\n}\r\n*/\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './Reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {loadState, saveState} from '../utils/localStorage';\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer,loadState(), applyMiddleware(thunk));\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n","import {RootReducerType} from '../BLL/store';\r\nimport {StateType} from '../BLL/Reducer';\r\n\r\n\r\n\r\n\r\n\r\nexport const loadState = ()=>{\r\n    let preloadedState = {\r\n        counter: {\r\n            num: 0,\r\n            maxNum: 0,\r\n            startValue: 0,\r\n            maxValue: 0,\r\n            startValueForClick: 0,\r\n            maxValueForClick: null,\r\n            error: false\r\n        }\r\n    };\r\n    let numAsString = localStorage.getItem('num');\r\n    let maxNumAsString = localStorage.getItem('maxNum');\r\n    let startValueForClickAsString = localStorage.getItem('startValueForClick');\r\n    let maxValueForClickAsString = localStorage.getItem('maxValueForClick');\r\n    if (numAsString) {\r\n        preloadedState.counter.num =  JSON.parse(numAsString)\r\n    }\r\n    if (maxNumAsString) {\r\n        preloadedState.counter.maxNum = JSON.parse(maxNumAsString)\r\n    }\r\n    if (startValueForClickAsString) {\r\n        preloadedState.counter.startValueForClick = JSON.parse(startValueForClickAsString)\r\n        preloadedState.counter.startValue = preloadedState.counter.startValueForClick\r\n    }\r\n    if (maxValueForClickAsString) {\r\n        preloadedState.counter.maxValueForClick = JSON.parse(maxValueForClickAsString)\r\n        if(preloadedState.counter.maxValueForClick){\r\n            preloadedState.counter.maxValue =  preloadedState.counter.maxValueForClick\r\n        }\r\n    }\r\n    return preloadedState\r\n}\r\n\r\n\r\nexport const saveState = (state:RootReducerType)=>{\r\n    localStorage.setItem('num', JSON.stringify(state.counter.num))\r\n    localStorage.setItem('maxNum', JSON.stringify(state.counter.maxNum))\r\n    localStorage.setItem('startValue', JSON.stringify(state.counter.startValue))\r\n    localStorage.setItem('maxValue', JSON.stringify(state.counter.maxValue))\r\n    localStorage.setItem('startValueForClick', JSON.stringify(state.counter.startValueForClick))\r\n    localStorage.setItem('maxValueForClick', JSON.stringify(state.counter.maxValueForClick))\r\n}","import React from \"react\";\r\nimport {maxValueForClickType} from '../../../App';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootReducerType} from '../../../BLL/store';\r\nimport {StateType} from '../../../BLL/Reducer';\r\n\r\n\r\n\r\nexport function Screen() {\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n\r\n    const screenClass = state.num === state.maxNum? \"screenMax\": \"screen\";\r\n    return (\r\n        <div className={screenClass}>\r\n            {state.error? <span className={\"error\"}>not valid value</span> : <span className={\"spanNum\"}>{state.num}</span>}\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype ButtonType = DefaultButtonPropsType & {\r\n    disabled?: boolean\r\n    onClick?: () => void\r\n    className?: string\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n    return (\r\n        <button {...props}/>\r\n    )\r\n}","import React from 'react';\r\nimport {Button} from './Button/Button';\r\nimport {maxValueForClickType} from '../../../App';\r\nimport {Routes, Route} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootReducerType} from '../../../BLL/store';\r\nimport {setNumAC, StateType} from '../../../BLL/Reducer';\r\n\r\n\r\n\r\nexport function Buttons() {\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n    const disableForMore = state.num === state.maxValueForClick || state.maxValueForClick === null || state.error;\r\n    const disableForReset = state.error || state.num === state.startValueForClick;\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <Button className={state.error || disableForMore ? 'buttonDis' : 'button'} disabled={disableForMore}\r\n                    onClick={()=>  dispatch(setNumAC(state.num+1))}>more</Button>\r\n            <Button className={state.error || disableForReset ? 'buttonDis' : 'button'} disabled={disableForReset}\r\n                    onClick={()=>  dispatch(setNumAC(state.startValueForClick))}>reset</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Screen} from './Screen/Screen';\r\nimport {Buttons} from './Buttons/Buttons';\r\n\r\n\r\nexport function CounterWithRedux() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Screen/>\r\n            <Buttons/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\n\r\ntype InputPropsType =InputDefaultType & {\r\n    label: string\r\n    num?: number\r\n    setNum?: (num: number) => void\r\n    maxValue?: number\r\n    setMaxValue?: (value: number) => void\r\n    error: boolean\r\n}\r\ntype InputDefaultType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\nexport function Input(props: InputPropsType) {\r\n\r\n    return (\r\n        <div className=\"valueInput\">\r\n            <label className={props.error? \"labelRed\": \"\"}>\r\n                {props.label}\r\n                <input className={props.error? \"errorInput\": \"\"}\r\n                    {...props}\r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}","import {Button} from '../Counter/Buttons/Button/Button';\r\nimport React, {ChangeEvent, Dispatch} from 'react';\r\nimport {Input} from './Input';\r\nimport {\r\n    ActionType,\r\n    setErrorAC, setMaxNumAC,\r\n    setMaxValueAC, setMaxValueForClickAC, setNumAC,\r\n    setStartValueAC,\r\n    setStartValueForClickAC,\r\n    StateType\r\n} from '../../BLL/Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootReducerType} from '../../BLL/store';\r\n\r\n\r\n\r\n\r\n\r\nexport function ParamsWithRedux() {\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    const onChangeMax = (e:ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValueAC(+e.currentTarget.value))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n    const onChangeStart = (e:ChangeEvent<HTMLInputElement>) => {\r\n       dispatch(setStartValueAC(+e.currentTarget.value))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n    const setParams = () => {\r\n        dispatch(setStartValueForClickAC(state.startValue))\r\n        dispatch(setMaxValueForClickAC(state.maxValue))\r\n        dispatch(setNumAC(state.startValue))\r\n        dispatch(setMaxNumAC(state.maxValue))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={'params'}>\r\n                <Input label={'maxValue'}\r\n                       error={state.error}\r\n                       type={'number'}\r\n                       value={state.maxValue}\r\n                       onChange={onChangeMax}\r\n                />\r\n                <Input label={'startValue'}\r\n                       error={state.error}\r\n                       value={state.startValue}\r\n                       type={'number'}\r\n                       onChange={onChangeStart}\r\n                />\r\n            </div>\r\n            <div className={'buttonSet'}>\r\n                <Button className={state.error? \"buttonDis\":'button'} disabled={state.error} onClick={setParams}>set</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {NavLink, Route, Routes} from 'react-router-dom';\r\nimport {setErrorAC, StateType} from './BLL/Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootReducerType} from './BLL/store';\r\nimport {CounterWithRedux} from './Components/Counter/CounterWithRedux';\r\nimport {ParamsWithRedux} from './Components/Params/ParamsWithRedux';\r\n\r\n\r\nexport type maxValueForClickType = number | null\r\n\r\n\r\nexport function AppWithRedux() {\r\n\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (state.maxValue < 0 || state.startValue < 0 || state.maxValue < state.startValue) {\r\n            dispatch(setErrorAC(true))\r\n        }\r\n    }, [state.maxValue, state.startValue])\r\n\r\n    return (\r\n        <div>\r\n            <SuperButtonSetTheme/>\r\n            <Routes>\r\n                <Route path={'/twoScreen'} element={\r\n                    <div className=\"wrapper\">\r\n                        <CounterWithRedux/>\r\n                        <ParamsWithRedux/>\r\n                    </div>\r\n                }/>\r\n                <Route key={'oneScreen'} path={'/oneScreen'} element={\r\n                    <div className=\"wrapper\">\r\n                        <CounterWithRedux/>\r\n                    </div>\r\n                }/>\r\n            </Routes>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function SuperButtonSetTheme() {\r\n    return (\r\n        <div className={'superButtons'}>\r\n            <button><NavLink to={'/twoScreen'}\r\n                             className={(isActive) => isActive ? 'activeNav' : 'navlink'}>twoScreen</NavLink></button>\r\n            <button><NavLink to={'/oneScreen'}\r\n                             className={(isActive) => isActive ? 'activeNav' : 'navlink'}>oneScreen</NavLink></button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './BLL/store';\r\nimport {AppWithRedux} from './AppWithRedux';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <Provider store={store}>\r\n              <AppWithRedux/>\r\n          </Provider>\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}